# Need for project
In the real estate market as well as the overall economy, real estate price forecast is vital. Accurate price forecasts help with risk management, investment planning, and well-informed 
decision-making for developers, homeowners, and investors.

# Describing dataset
There are 414 records in the given dataset that provide comprehensive details on real estate transactions. It includes a number of elements that are frequently significant in determining 
real estate prices:
Transaction date: Date of the property transaction. 
House age: Age of the property in years. 
Distance to the nearest MRT station: Proximity to the nearest Mass Rapid Transit station in meters, is a key factor considering convenience and accessibility. 
Number of convenience stores: Count of convenience stores in the vicinity, indicating the propertyâ€™s accessibility to basic amenities. 
Latitude and Longitude: Geographical coordinates of the property, reflecting its location. 
House price of unit area: The target variable, represents the house price per unit area.

# Objective
The main goal is to create a prediction model that can reliably estimate the cost of a home per unit space based on a variety of characteristics, 
including the property's age, location, and distance from important facilities like convenience stores and MRT stations.

# Constructing a Complete Machine Learning Model: Procedure
Install a fresh Dash app. Design the app's layout with Dash's HTML and Core Components. It has display sections for the output, buttons, and input fields. 
To specify the application's interactivity, such as receiving user inputs, executing the model prediction, and presenting the outcomes, write callback functions. 
To utilize the model for predictions, load it into the app. 

# in:
# Import libraries
import pandas as pd

# Load the dataset
real_estate_data = pd.read_csv("Real_Estate.csv") #replace the path with your path

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Selecting features and target variable
features = ['Distance to the nearest MRT station', 'Number of convenience stores', 'Latitude', 'Longitude']
target = 'House price of unit area'

X = real_estate_data[features]
y = real_estate_data[target]

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model initialization
model = LinearRegression()

# Training the model
model.fit(X_train, y_train)

# Out:
LinearRegression
LinearRegression()

# in:
# Importing Dash 
import dash
from dash import html, dcc, Input, Output, State
import pandas as pd

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.Div([
        html.H1("Real Estate Price Prediction", style={'text-align': 'center'}),
        
        html.Div([
            dcc.Input(id='distance_to_mrt', type='number', placeholder='Distance to MRT Station (meters)',
                      style={'margin': '10px', 'padding': '10px'}),
            dcc.Input(id='num_convenience_stores', type='number', placeholder='Number of Convenience Stores',
                      style={'margin': '10px', 'padding': '10px'}),
            dcc.Input(id='latitude', type='number', placeholder='latitude',
                      style={'margin': '10px', 'padding': '10px'}),
            dcc.Input(id='longitude', type='number', placeholder='longitude',
                      style={'margin': '10px', 'padding': '10px'}),
            html.Button('Predict Price', id='predict_button', n_clicks=0,
                        style={'margin': '10px', 'padding': '10px', 'background-color': '#007BFF', 'color': 'white'}),
        ], style={'text-align': 'center'}),
        
        html.Div(id='prediction_output', style={'text-align': 'center', 'font-size': '20px', 'margin-top': '20px'})
    ], style={'width': '50%', 'margin': '0 auto', 'border': '2px solid #007BFF', 'padding': '20px', 'border-radius': '10px'})
])

# Define callback to update output
@app.callback(
    Output('prediction_output', 'children'),
    [Input('predict_button', 'n_clicks')],
    [State('distance_to_mrt', 'value'), 
     State('num_convenience_stores', 'value'),
     State('latitude', 'value'),
     State('longitude', 'value')]
)
def update_output(n_clicks, distance_to_mrt, num_convenience_stores, latitude, longitude):
    if n_clicks > 0 and all(v is not None for v in [distance_to_mrt, num_convenience_stores, latitude, longitude]):
        # Prepare the feature vector
        features = pd.DataFrame([[distance_to_mrt, num_convenience_stores, latitude, longitude]], 
                                columns=['distance_to_mrt', 'num_convenience_stores', 'House age', 'latitude', 'longitude'])
        # Predict
        prediction = model.predict(features)[0]
        return f'Predicted House Price of Unit Area: {prediction:.2f}'
    elif n_clicks > 0:
        return 'Please enter all values to get a prediction'
    return ''

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
